/* Generated By:JavaCC: Do not edit this line. PrismParser.java */
package parser;

import java.io.*;
import java.util.ArrayList;

import parser.ast.*;
import prism.PrismLangException;

public class PrismParser implements PrismParserConstants {
        // The modules file associated with properties file being parsed
        private static ModulesFile modulesFile;

        // List of keyword strings
        private static ArrayList<String> keywordList = new ArrayList<String>();

        // Flag indicating whether we are parsing a PRISM property (or just a PRISM expression);
        private static boolean parsingProperty = false;

        //-----------------------------------------------------------------------------------
        // Main method for testing purposes
        //-----------------------------------------------------------------------------------

        public static void main(String[] args)
        {
                PrismParser p = null;
                InputStream str = null;
                String src = null;

                try {
                        if (args.length == 0) {
                                System.out.println("Usage: java parser.PrismParser <switch> [<file>]");
                                System.out.println("Where: <switch> = -modulesfile or -mf");
                                System.out.println("                  -propertiesfile or -pf");
                                System.out.println("                  -expression or -e");
                                System.exit(1);
                        }

                        p = new PrismParser();
                        str = (args.length > 1) ? new FileInputStream(args[1]) : System.in;
                        src = (args.length > 1) ? "file "+args[1] : "stdin";
                        System.out.println("Reading from "+src+"...\n");

                        if (args[0].equals("-modulesfile") || args[0].equals("-mf")) {
                                ModulesFile mf = p.parseModulesFile(str);
                                System.out.print("Modules file:\n=============\n\n" + mf);
                                System.out.print("\nTree:\n=====\n" + mf.toTreeString());
                                mf.tidyUp();
                                System.out.print("\nAnd after expansion:\n====================\n\n" +mf);
                        }
                        else if (args[0].equals("-propertiesfile") || args[0].equals("-pf")) {
                                PropertiesFile pf = p.parsePropertiesFile(new ModulesFile(), str);
                                System.out.print("Properties file:\n================\n\n" + pf);
                                System.out.print("\nTree:\n=====\n" + pf.toTreeString());
                                pf.tidyUp();
                                System.out.print("\nAnd after expansion:\n====================\n\n" + pf);
                        }
                        else if (args[0].equals("-expression") || args[0].equals("-e")) {
                                Expression expr = p.parseSingleExpression(str);
                                System.out.println("Expression: " + expr.toString());
                                System.out.print("Tree:\n=====\n" + expr.toTreeString());
                                expr.typeCheck();
                                expr.semanticCheck();
                                System.out.println("Type: " + Expression.getTypeString(expr.getType()));
                                System.out.println("Eval: " + expr.evaluate(null, null));
                        } else {
                                System.out.println("Unknown switch"); System.exit(1);
                        }
                }
                catch (PrismLangException e) {
                        System.out.println("Error in "+src+": " + e.getMessage()+"."); System.exit(1);
                }
                catch (FileNotFoundException e) {
                        System.out.println(e); System.exit(1);
                }
        }

        //-----------------------------------------------------------------------------------
        // Methods called by Prism
        //-----------------------------------------------------------------------------------

        // Constructor

        public PrismParser()
        {
                // Call default constructor
                this(System.in);
                // Build a list of strings for keywords
                keywordList.clear();
                for (int i = PrismParserConstants.COMMENT+1; i < PrismParserConstants.NOT; i++) {
                        keywordList.add(PrismParserConstants.tokenImage[i].replaceAll("\"", ""));
                }
        }

        // Parse modules file

        public ModulesFile parseModulesFile(InputStream str) throws PrismLangException { return parseModulesFile(str, 0); }

        public ModulesFile parseModulesFile(InputStream str, int typeOverride) throws PrismLangException
        {
                ModulesFile mf = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        mf = ModulesFile();
                }
                catch (ParseException e) {
                        ExpressionIdent tmp = new ExpressionIdent(e.currentToken.next.image);
                        tmp.setPosition(e.currentToken.next);
                        throw new PrismLangException("Syntax error", tmp);
                }
                // Override type of model if requested
                if (typeOverride != 0) {
                        mf.setType(typeOverride);
                }

                return mf;
        }

        // Parse properties file (pass ModulesFile in to get at its constants)

        public PropertiesFile parsePropertiesFile(ModulesFile mf, InputStream str) throws PrismLangException
        { return parsePropertiesFile(mf, str, false); }

        public PropertiesFile parsePropertiesFile(ModulesFile mf, InputStream str, boolean strict) throws PrismLangException
        {
                PropertiesFile pf = null;

                // (Re)start parser
                ReInit(str);
                modulesFile = mf;
                // Parse
                try {
                        pf = strict ? PropertiesFile() : PropertiesFileSemicolonless();
                }
                catch (ParseException e) {
                        ExpressionIdent tmp = new ExpressionIdent(e.currentToken.next.image);
                        tmp.setPosition(e.currentToken.next);
                        throw new PrismLangException("Syntax error", tmp);
                }

                return pf;
        }

        // Parse a single expression

        public Expression parseSingleExpression(InputStream str) throws PrismLangException
        {
                Expression expr = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        expr = SingleExpression();
                }
                catch (ParseException e) {
                        ExpressionIdent tmp = new ExpressionIdent(e.currentToken.next.image);
                        tmp.setPosition(e.currentToken.next);
                        throw new PrismLangException("Syntax error", tmp);
                }
                return expr;
        }

        // Parse a for loop

        public ForLoop parseForLoop(InputStream str) throws PrismLangException
        {
                ForLoop fl = null;

                // (Re)start parser
                ReInit(str);
                // Parse
                try {
                        fl = ForLoop();
                }
                catch (ParseException e) {
                        ExpressionIdent tmp = new ExpressionIdent(e.currentToken.next.image);
                        tmp.setPosition(e.currentToken.next);
                        throw new PrismLangException("Syntax error", tmp);
                }
                return fl;
        }

        //-----------------------------------------------------------------------------------
        // Some utility methods
        //-----------------------------------------------------------------------------------

        // Get comment block (including white space)
        // preceding a token and remove "//" characters

        public static String getPrecedingCommentBlock(Token firstToken)
        {
                String comment = "", s;
                Token t = firstToken;

                // extract any comment from the previous lines of the file
                if (t.specialToken != null) {
                        // trace back thru special tokens
                        t = t.specialToken;
                        while (t.specialToken != null) t = t.specialToken;
                        // ignore initial white space
                        while (t != null && t.kind == PrismParserConstants.WHITESPACE) t = t.next;
                        // concatenate special tokens
                        while (t != null) {
                                s = t.image;
                                // strip any nasty carriage returns
                                s = s.replaceAll("\r", "");
                                // remove "//" and preceding/subsequent spaces/tabs from comments
                                if (t.kind == PrismParserConstants.COMMENT) {
                                        while (comment.length() > 0 && (""+comment.charAt(comment.length()-1)).matches("[ \t]"))
                                                comment = comment.substring(0,comment.length()-1);
                                        s = s.substring(2);
                                        s = s.replaceFirst("[ \t]*", "");
                                }
                                comment += s;
                                t = t.next;
                        }
                }
                // remove final new line (if present)
                if (comment.length() > 0 && (comment.charAt(comment.length()-1) == '\n'))
                        comment = comment.substring(0,comment.length()-1);

                return comment;
        }

        // Add "//"s into comment block

        public static String slashCommentBlock(String comment)
        {
                int i;
                String s, res = "";
                // break into lines
                while ((i = comment.indexOf("\n")) != -1) {
                        s = comment.substring(0, i);
                        comment = comment.substring(i+1);
                        // add "//" to non-empty lines
                        if (s.trim().length()>0) res += "// " + s;
                        res += "\n";
                }
                // deal with any trailing characters (with no new line ending them)
                if (comment.trim().length()>0) res += "// " + comment + "\n";
                return res;
        }

        // Test a string to see if it is a PRISM language keyword

        public static boolean isKeyword(String s)
        {
                return keywordList.contains(s);
        }

        /**
	 * Set the tab size used by the lexer/parser.
	 */
        public void setTabSize(int size)
        {
                SimpleCharStream.setTabSize(size);
        }

        /**
	 * Get the tab size used by the lexer/parser.
	 */
        public int getTabSize() {
                return SimpleCharStream.getTabSize(0);
        }

        //-----------------------------------------------------------------------------------
        // A few classes for temporary storage of bits of the AST
        //-----------------------------------------------------------------------------------

        static class TimeBound { public Expression lBound = null; public Expression uBound = null; }

//-----------------------------------------------------------------------------------
// Top-level productions
//-----------------------------------------------------------------------------------

// Modules file
  static final public ModulesFile ModulesFile() throws ParseException, PrismLangException {
        int type = 0;
        int typeCount = 0;
        Token typeDupe = null;
        Declaration global;
        Module m = null;
        RenamedModule rm = null;
        RewardStruct rs = null;
        Expression init = null;
        int initCount = 0;
        Expression initDupe = null;
        SystemDefn sys = null;
        int sysCount = 0;
        SystemDefn sysDupe = null;
        ModulesFile mf = new ModulesFile();
        Token begin = null;
        parsingProperty = false;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case CTMC:
      case DTMC:
      case FORMULA:
      case GLOBAL:
      case INIT:
      case LABEL:
      case MDP:
      case MODULE:
      case NONDETERMINISTIC:
      case PROBABILISTIC:
      case PROB:
      case RATE:
      case REWARDS:
      case STOCHASTIC:
      case SYSTEM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CTMC:
      case DTMC:
      case MDP:
      case NONDETERMINISTIC:
      case PROBABILISTIC:
      case STOCHASTIC:
            begin = getToken(1);
        type = ModulesFileType();
                                   typeCount++; if (typeCount == 2) typeDupe = getToken(0);
        break;
      case FORMULA:
        FormulaDef(mf.getFormulaList());
        break;
      case LABEL:
        LabelDef(mf.getLabelList());
        break;
      case CONST:
      case PROB:
      case RATE:
        ConstantDef(mf.getConstantList());
        break;
      case GLOBAL:
        // Global variable
                global = GlobalDecl();
                                mf.addGlobal(global);
        break;
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_1(2147483647)) {
          rm = RenamedModule();
                                                                     mf.addRenamedModule(rm);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MODULE:
            // Module
                    m = Module();
                       mf.addModule(m);
            break;
          case REWARDS:
            // Reward structure
                    rs = RewardStruct();
                              mf.addRewardStruct(rs);
            break;
          case INIT:
            // Initial states ("init...endinit" construct)
                    init = Init();
                        mf.setInitialStates(init); initCount++; if (initCount == 2) initDupe = init;
            break;
          case SYSTEM:
            // System definition ("system...endsystem" construct)
                    sys = SystemEndsystem();
                                  mf.setSystemDefn(sys); sysCount++; if (sysCount == 2) sysDupe = sys;
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(0);
                // Check for multiple instances of some items
                if (typeDupe != null) {
                        ExpressionIdent tmp = new ExpressionIdent(typeDupe.image);
                        tmp.setPosition(typeDupe);
                        {if (true) throw new PrismLangException("There were multiple model type declarations", tmp);}
                }
                if (initDupe != null) {
                        {if (true) throw new PrismLangException("There were multiple init...endinit constructs", initDupe);}
                }
                if (sysDupe != null) {
                        {if (true) throw new PrismLangException("There were multiple system...endsystem constructs", sysDupe);}
                }

                // Set type (default is MDP)
                switch (type) {
                        case PROBABILISTIC:
                        case DTMC:
                                mf.setType(ModulesFile.PROBABILISTIC); break;
                        case NONDETERMINISTIC:
                        case MDP:
                                mf.setType(ModulesFile.NONDETERMINISTIC); break;
                        case STOCHASTIC:
                        case CTMC:
                                mf.setType(ModulesFile.STOCHASTIC); break;
                        default : mf.setType(ModulesFile.NONDETERMINISTIC); break;
                }

                // Return completed ModulesFile object
                mf.setPosition(begin != null? begin: getToken(0), getToken(0));
                {if (true) return mf;}
    throw new Error("Missing return statement in function");
  }

// Properties file
  static final public PropertiesFile PropertiesFile() throws ParseException, PrismLangException {
        PropertiesFile pf = new PropertiesFile(modulesFile);
        Expression expr;
        Token begin = null, t = null;
        parsingProperty = false;
          begin = getToken(1);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case FALSE:
      case FUNC:
      case LABEL:
      case MAX:
      case MIN:
      case PMAX:
      case PMIN:
      case P:
      case PROB:
      case RATE:
      case RMAX:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case FUNC:
      case MAX:
      case MIN:
      case PMAX:
      case PMIN:
      case P:
      case RMAX:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:
                    t = getToken(1);
        expr = Property();
                                                           pf.addProperty(expr, getPrecedingCommentBlock(t));
        label_3:
        while (true) {
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
        }
        break;
      case LABEL:
        LabelDef(pf.getLabelList());
        break;
      case CONST:
      case PROB:
      case RATE:
        ConstantDef(pf.getConstantList());
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
          pf.setPosition(begin, getToken(0)); {if (true) return pf;}
    throw new Error("Missing return statement in function");
  }

// Properties file with optional semicolons - beware of potential ambiguities
  static final public PropertiesFile PropertiesFileSemicolonless() throws ParseException, PrismLangException {
        PropertiesFile pf = new PropertiesFile(modulesFile);
        Expression expr;
        Token begin = null, t = null;
        parsingProperty = false;
          begin = getToken(1);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case FALSE:
      case FUNC:
      case LABEL:
      case MAX:
      case MIN:
      case PMAX:
      case PMIN:
      case P:
      case PROB:
      case RATE:
      case RMAX:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case FUNC:
      case MAX:
      case MIN:
      case PMAX:
      case PMIN:
      case P:
      case RMAX:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:
                    t = getToken(1);
        expr = Property();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(SEMICOLON);
        }
                                                                          pf.addProperty(expr, getPrecedingCommentBlock(t));
        break;
      case LABEL:
        LabelDef(pf.getLabelList());
        break;
      case CONST:
      case PROB:
      case RATE:
        ConstantDef(pf.getConstantList());
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
          pf.setPosition(begin, getToken(0)); {if (true) return pf;}
    throw new Error("Missing return statement in function");
  }

// Property expression (used above)
  static final public Expression Property() throws ParseException {
        Expression expr;
        parsingProperty = true;
    expr = Expression();
                parsingProperty = false;
                {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// A single expression
  static final public Expression SingleExpression() throws ParseException {
        Expression ret;
        parsingProperty = false;
    ret = Expression();
    jj_consume_token(0);
                                       {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Modules file stuff (a few bits of which are reused for property files)
//-----------------------------------------------------------------------------------

// Keyword denoting model type
  static final public int ModulesFileType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DTMC:
      jj_consume_token(DTMC);
      break;
    case PROBABILISTIC:
      jj_consume_token(PROBABILISTIC);
      break;
    case MDP:
      jj_consume_token(MDP);
      break;
    case NONDETERMINISTIC:
      jj_consume_token(NONDETERMINISTIC);
      break;
    case CTMC:
      jj_consume_token(CTMC);
      break;
    case STOCHASTIC:
      jj_consume_token(STOCHASTIC);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return getToken(0).kind;}
    throw new Error("Missing return statement in function");
  }

// Formula definition
  static final public void FormulaDef(FormulaList formulaList) throws ParseException {
        Expression name = null, expr = null;
    jj_consume_token(FORMULA);
    name = ExpressionIdent();
    jj_consume_token(EQ);
    expr = Expression();
    jj_consume_token(SEMICOLON);
          formulaList.addFormula((ExpressionIdent)name, expr);
  }

// Label definition
  static final public void LabelDef(LabelList labelList) throws ParseException, PrismLangException {
        Expression name = null, expr = null;
    if (jj_2_2(2147483647)) {
      jj_consume_token(LABEL);
      jj_consume_token(DQUOTE);
      name = ExpressionIdent();
      jj_consume_token(DQUOTE);
      jj_consume_token(EQ);
      expr = Expression();
      jj_consume_token(SEMICOLON);
          labelList.addLabel((ExpressionIdent)name, expr);
    } else if (jj_2_3(2147483647)) {
      jj_consume_token(LABEL);
      name = ExpressionIdent();
                                                                    {if (true) throw new PrismLangException("Label names must be enclosed in double-quotes", name);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Constant definition
  static final public void ConstantDef(ConstantList constantList) throws ParseException {
        int type = Expression.INT;
        Expression name = null, expr = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      jj_consume_token(CONST);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case DOUBLE:
      case INT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
                             type=Expression.INT;
          break;
        case DOUBLE:
          jj_consume_token(DOUBLE);
                                                                 type=Expression.DOUBLE;
          break;
        case BOOL:
          jj_consume_token(BOOL);
                                                                                                      type=Expression.BOOLEAN;
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      break;
    case PROB:
    case RATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RATE:
        jj_consume_token(RATE);
        break;
      case PROB:
        jj_consume_token(PROB);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                               type=Expression.DOUBLE;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    // Name and (optional) initial value
            name = ExpressionIdent();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      expr = Expression();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
          constantList.addConstant((ExpressionIdent)name, expr, type);
  }

// Global variable declaration
  static final public Declaration GlobalDecl() throws ParseException {
        Declaration decl = null;
    jj_consume_token(GLOBAL);
    decl = Declaration();
          {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

// Variable declaration
  static final public Declaration Declaration() throws ParseException {
        String name = null;
        Expression low = null, high = null, init = null;
        Declaration decl;
        Token begin = null;
            begin = getToken(1);
    name = Identifier();
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      low = Expression();
      jj_consume_token(DOTS);
      high = Expression();
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
        jj_consume_token(INIT);
        init = Expression();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
          decl = new Declaration(name, low, high, init);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INIT:
        jj_consume_token(INIT);
        init = Expression();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                                                                 {if (true) return new Declaration(name, init);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          decl.setPosition(begin, getToken(0)); {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

// Module
  static final public Module Module() throws ParseException {
        String name = null;
        Declaration var = null;
        Command comm = null;
        Module module = null;
        Token begin = null;
    begin = jj_consume_token(MODULE);
    name = Identifier();
                                               module = new Module(name);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REG_IDENT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_6;
      }
      var = Declaration();
                                module.addDeclaration(var);
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
      comm = Command();
                             module.addCommand(comm);
    }
    jj_consume_token(ENDMODULE);
          module.setPosition(begin, getToken(0)); {if (true) return module;}
    throw new Error("Missing return statement in function");
  }

// Command
  static final public Command Command() throws ParseException {
        String synch = null;
        Expression guard = null;
        Updates updates = null;
        Command comm = new Command();
        Token begin = null;
    // Synchronisation action-label
            begin = jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG_IDENT:
      synch = Identifier();
                                                    comm.setSynch(synch);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
    // Guard/updates
            guard = Expression();
                               comm.setGuard(guard);
    jj_consume_token(RARROW);
    updates = Updates();
                                                                                      comm.setUpdates(updates);
    jj_consume_token(SEMICOLON);
          comm.setPosition(begin, getToken(0)); {if (true) return comm;}
    throw new Error("Missing return statement in function");
  }

// Updates
  static final public Updates Updates() throws ParseException {
        Expression prob;
        Update update;
        Updates updates = new Updates();
        Token begin = null;
          begin = getToken(1);
    if (jj_2_4(2147483647)) {
      update = Update();
                  updates.addUpdate(null, update);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case FUNC:
      case MAX:
      case MIN:
      case PMAX:
      case PMIN:
      case P:
      case RMAX:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:
        prob = Expression();
        jj_consume_token(COLON);
        update = Update();
                                                                  updates.addUpdate(prob, update);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_8;
          }
          jj_consume_token(PLUS);
          prob = Expression();
          jj_consume_token(COLON);
          update = Update();
                                                                         updates.addUpdate(prob, update);
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          updates.setPosition(begin, getToken(0)); {if (true) return updates;}
    throw new Error("Missing return statement in function");
  }

  static final public Update Update() throws ParseException {
        Update update = new Update();
        Token begin = null;
          begin = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENTH:
      UpdateElement(update);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        jj_consume_token(AND);
        UpdateElement(update);
      }
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          update.setPosition(begin, getToken(0)); {if (true) return update;}
    throw new Error("Missing return statement in function");
  }

  static final public void UpdateElement(Update update) throws ParseException {
        ExpressionIdent var = null;
        Expression expr = null;
    jj_consume_token(LPARENTH);
    var = IdentifierPrime();
    jj_consume_token(EQ);
    expr = Expression();
    jj_consume_token(RPARENTH);
                                                                                 update.addElement(var, expr);
  }

// Module renaming
  static final public RenamedModule RenamedModule() throws ParseException {
        String name = null, base = null;
        RenamedModule rm = null;
        Token begin = null;
    begin = jj_consume_token(MODULE);
    name = Identifier();
    jj_consume_token(EQ);
    base = Identifier();
                                                                        rm = new RenamedModule(name, base);
    jj_consume_token(LBRACKET);
    Rename(rm);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      Rename(rm);
    }
    jj_consume_token(RBRACKET);
    jj_consume_token(ENDMODULE);
          rm.setPosition(begin, getToken(0)); {if (true) return rm;}
    throw new Error("Missing return statement in function");
  }

  static final public void Rename(RenamedModule rm) throws ParseException {
        String id1 = null, id2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG_IDENT:
      id1 = Identifier();
      break;
    case MIN:
      jj_consume_token(MIN);
                                      id1="min";
      break;
    case MAX:
      jj_consume_token(MAX);
                                                             id1="max";
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG_IDENT:
      id2 = Identifier();
      break;
    case MIN:
      jj_consume_token(MIN);
                                     id2="min";
      break;
    case MAX:
      jj_consume_token(MAX);
                                                            id2="max";
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                rm.addRename(id1, id2);
  }

// Reward structure
  static final public RewardStruct RewardStruct() throws ParseException {
        String name = null, s = null;
        Expression guard = null, value = null;
        RewardStruct rs = new RewardStruct();
        RewardStructItem rsi;
        Token begin = null, begin2 = null;
    begin = jj_consume_token(REWARDS);
    if (jj_2_5(2147483647)) {
      jj_consume_token(DQUOTE);
      name = Identifier();
      jj_consume_token(DQUOTE);
                                                                      rs.setName(name);
    } else {
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case FUNC:
      case MAX:
      case MIN:
      case PMAX:
      case PMIN:
      case P:
      case RMAX:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case LBRACKET:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
            begin2 = getToken(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
                                                   s = "";
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REG_IDENT:
          s = Identifier();
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      guard = Expression();
      jj_consume_token(COLON);
      value = Expression();
      jj_consume_token(SEMICOLON);
          rsi = new RewardStructItem(s, guard, value); rsi.setPosition(begin2, getToken(0)); rs.addItem(rsi);
    }
    jj_consume_token(ENDREWARDS);
          rs.setPosition(begin, getToken(0)); {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

// Initial states ("init...endinit" construct)
  static final public Expression Init() throws ParseException {
        Expression expr = null;
    jj_consume_token(INIT);
    expr = Expression();
    jj_consume_token(ENDINIT);
                                               {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// System definition ("system...endsystem" construct)
  static final public SystemDefn SystemEndsystem() throws ParseException {
        SystemDefn ret;
    jj_consume_token(SYSTEM);
    ret = SystemDefn();
    jj_consume_token(ENDSYSTEM);
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// System definition component
  static final public SystemDefn SystemDefn() throws ParseException {
        SystemDefn ret;
    ret = SystemFullParallel();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// System definition component (full parallel)
  static final public SystemDefn SystemFullParallel() throws ParseException {
        SystemDefn sys1 = null, sys2 = null;
        SystemFullParallel par = null;
        Token begin;
          begin = getToken(1);
    sys1 = SystemInterleaved();
            par = new SystemFullParallel(); par.addOperand(sys1);
    label_12:
    while (true) {
      if (jj_2_6(2147483647)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      sys2 = SystemParallel();
                                                                                                                               par.addOperand(sys2);
    }
                if (par==null) {
                        {if (true) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if (true) return par;}
                }
    throw new Error("Missing return statement in function");
  }

// System definition component (interleaved parallel)
  static final public SystemDefn SystemInterleaved() throws ParseException {
        SystemDefn sys1 = null, sys2 = null;
        SystemInterleaved par = null;
        Token begin;
          begin = getToken(1);
    sys1 = SystemParallel();
            par = new SystemInterleaved(); par.addOperand(sys1);
    label_13:
    while (true) {
      if (jj_2_7(2147483647)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(OR);
      jj_consume_token(OR);
      jj_consume_token(OR);
      sys2 = SystemFullParallel();
                                                                                                                                             par.addOperand(sys2);
    }
                if (par==null) {
                        {if (true) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if (true) return par;}
                }
    throw new Error("Missing return statement in function");
  }

// System definition component (parallel over set of actions)
  static final public SystemDefn SystemParallel() throws ParseException {
        SystemDefn sys1 = null, sys2 = null;
        SystemParallel par = null;
        String s;
        Token begin;
          begin = getToken(1);
    sys1 = SystemHideRename();
    if (jj_2_8(2147483647)) {
                                       par = new SystemParallel(); par.setOperand1(sys1);
      jj_consume_token(OR);
      jj_consume_token(LBRACKET);
      s = Identifier();
                                          par.addAction(s);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        s = Identifier();
                                                                                           par.addAction(s);
      }
      jj_consume_token(RBRACKET);
      jj_consume_token(OR);
      sys2 = SystemHideRename();
                                           par.setOperand2(sys2);
    } else {
      ;
    }
                if (par==null) {
                        {if (true) return sys1;}
                }
                else {
                        par.setPosition(begin, getToken(0));
                        {if (true) return par;}
                }
    throw new Error("Missing return statement in function");
  }

// System definition component (hiding and renaming)
  static final public SystemDefn SystemHideRename() throws ParseException {
        SystemDefn sys = null;
        SystemHide hide = null;
        SystemRename rename = null;
        String s1 = null, s2 = null;
        Token begin;
          begin = getToken(1);
    sys = SystemAtomic();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
                  hide = new SystemHide(sys);
        jj_consume_token(DIVIDE);
        jj_consume_token(LBRACE);
        s1 = Identifier();
                                                        hide.addAction(s1);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          s1 = Identifier();
                                                                                                            hide.addAction(s1);
        }
        jj_consume_token(RBRACE);
                  sys = hide;
        break;
      case LBRACE:
                  rename = new SystemRename(sys);
        jj_consume_token(LBRACE);
        s1 = Identifier();
        jj_consume_token(RENAME);
        s2 = Identifier();
                                                                        rename.addRename(s1, s2);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA);
          s1 = Identifier();
          jj_consume_token(RENAME);
          s2 = Identifier();
                                                                         rename.addRename(s1, s2);
        }
        jj_consume_token(RBRACE);
                  sys = rename;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          sys.setPosition(begin, getToken(0)); {if (true) return sys;}
    throw new Error("Missing return statement in function");
  }

// System definition component (bottom level)
  static final public SystemDefn SystemAtomic() throws ParseException {
        String name = null;
        SystemDefn sys = null;
        Token begin;
          begin = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG_IDENT:
      name = Identifier();
                                 sys = new SystemModule(name);
      break;
    case LPARENTH:
      jj_consume_token(LPARENTH);
      sys = SystemDefn();
      jj_consume_token(RPARENTH);
                                                      sys = new SystemBrackets(sys);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          sys.setPosition(begin, getToken(0)); {if (true) return sys;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Expressions - including PRISM properties (depending on "parsingProperty" flag)
//-----------------------------------------------------------------------------------

// Expression
  static final public Expression Expression() throws ParseException {
        Expression ret;
    ret = ExpressionITE();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: if-then-else, i.e. "cond ? then : else"
  static final public Expression ExpressionITE() throws ParseException {
        Expression ret, left, right;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionImplies();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
      jj_consume_token(QMARK);
      left = ExpressionImplies();
      jj_consume_token(COLON);
      right = ExpressionITE();
                                                                               ret = new ExpressionITE(ret, left, right); ret.setPosition(begin, getToken(0));
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: implies
  static final public Expression ExpressionImplies() throws ParseException {
        Expression ret, expr;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionOr();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIES:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_18;
      }
      jj_consume_token(IMPLIES);
      expr = ExpressionOr();
                                            ret = new ExpressionBinaryOp(ExpressionBinaryOp.IMPLIES, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: or
  static final public Expression ExpressionOr() throws ParseException {
        Expression ret, expr;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionAnd();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_19;
      }
      jj_consume_token(OR);
      expr = ExpressionAnd();
                                        ret = new ExpressionBinaryOp(ExpressionBinaryOp.OR, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: and
  static final public Expression ExpressionAnd() throws ParseException {
        Expression ret, expr;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionNot();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_20;
      }
      jj_consume_token(AND);
      expr = ExpressionNot();
                                         ret = new ExpressionBinaryOp(ExpressionBinaryOp.AND, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: not
  static final public Expression ExpressionNot() throws ParseException {
        Expression ret, expr;
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      begin = jj_consume_token(NOT);
      expr = ExpressionNot();
                                                       ret = new ExpressionUnaryOp(ExpressionUnaryOp.NOT, expr); ret.setPosition(begin, getToken(0));
      break;
    case FALSE:
    case FUNC:
    case MAX:
    case MIN:
    case PMAX:
    case PMIN:
    case P:
    case RMAX:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case LPARENTH:
    case MINUS:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENT:
      ret = ExpressionEquality();
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: equality operators: =, !=
  static final public Expression ExpressionEquality() throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionRelop();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_21;
      }
      op = EqNeq();
      expr = ExpressionRelop();
                                                  ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: relational operators: >, <, >=, <=
  static final public Expression ExpressionRelop() throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionPlusMinus();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_22;
      }
      op = LtGt();
      expr = ExpressionPlusMinus();
                                                     ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: plus/minus

// JavaCC warns about lookahead for this function. This is because in a few places
// (bounded temporal operators and semicolon-less properties files)
// (see the relevant productions for details)
// we allow two or more successive expressions resulting in potential ambiguities
// e.g. "-a-b" = "(-a)-b" = "-a" "-b"
// Ignoring the warning results in the largest match being taken.
  static final public Expression ExpressionPlusMinus() throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionTimesDivide();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                           op = ExpressionBinaryOp.PLUS;
        break;
      case MINUS:
        jj_consume_token(MINUS);
                                                                       op = ExpressionBinaryOp.MINUS;
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = ExpressionTimesDivide();
                                                 ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: times/divide
  static final public Expression ExpressionTimesDivide() throws ParseException {
        Expression ret, expr;
        int op;
        Token begin = null;
          begin = getToken(1);
    ret = ExpressionUnaryMinus();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
                            op = ExpressionBinaryOp.TIMES;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
                                                                          op = ExpressionBinaryOp.DIVIDE;
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = ExpressionUnaryMinus();
                                                ret = new ExpressionBinaryOp(op, ret, expr); ret.setPosition(begin, getToken(0));
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: unary minus
  static final public Expression ExpressionUnaryMinus() throws ParseException {
        Expression ret, expr;
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      begin = jj_consume_token(MINUS);
      expr = ExpressionUnaryMinus();
                  ret = new ExpressionUnaryOp(ExpressionUnaryOp.MINUS, expr); ret.setPosition(begin, getToken(0));
      break;
    case FALSE:
    case FUNC:
    case MAX:
    case MIN:
    case PMAX:
    case PMIN:
    case P:
    case RMAX:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case LPARENTH:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENT:
      ret = ExpressionBasic();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Basic expression (top of operator precedence ordering)
  static final public Expression ExpressionBasic() throws ParseException {
        Expression ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case REG_INT:
    case REG_DOUBLE:
      ret = ExpressionLiteral();
      break;
    case REG_IDENT:
      ret = ExpressionFuncOrIdent();
      break;
    case MAX:
    case MIN:
      ret = ExpressionFuncMinMax();
      break;
    case FUNC:
      ret = ExpressionFuncOldStyle();
      break;
    case LPARENTH:
      ret = ExpressionParenth();
      break;
    case PMAX:
    case PMIN:
    case P:
    case RMAX:
    case RMIN:
    case R:
    case S:
    case DQUOTE:
      // Remaining options are only applicable for properties
                      ret = ExpressionBasicProperties();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: function or identifier

// JavaCC warns about lookahead for this function. This is because in a few places
// (bounded temporal operators and semicolon-less properties files)
// (see the relevant productions for details)
// we allow two or more successive expressions resulting in potential ambiguities
// e.g. "a(b)" = "a" "(b)"
// Ignoring the warning results in the largest match being taken.
  static final public Expression ExpressionFuncOrIdent() throws ParseException {
        String s = null;
        Expression ret = null;
        Token begin = null;
    // If there is no "(...)", this is an identifier
            s = Identifier();
                           ret = new ExpressionIdent(s); begin = getToken(0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARENTH:
      jj_consume_token(LPARENTH);
                       ret = new ExpressionFunc(s);
      ExpressionFuncArgs((ExpressionFunc)ret);
      jj_consume_token(RPARENTH);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
          ret.setPosition(begin, getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: min/max function (treated differently because min/max are keywords)
  static final public Expression ExpressionFuncMinMax() throws ParseException {
        String s = null;
        ExpressionFunc func = null;
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      begin = jj_consume_token(MIN);
                          s = "min";
      break;
    case MAX:
      begin = jj_consume_token(MAX);
                                                         s = "max";
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          func = new ExpressionFunc(s);
    jj_consume_token(LPARENTH);
    ExpressionFuncArgs(func);
    jj_consume_token(RPARENTH);
          func.setPosition(begin, getToken(0)); {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

// Expression: old-style function, i.e. "func(name, ...)"
  static final public Expression ExpressionFuncOldStyle() throws ParseException {
        String s = null;
        ExpressionFunc func = null;
        Token begin = null;
    begin = jj_consume_token(FUNC);
    jj_consume_token(LPARENTH);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      jj_consume_token(MIN);
                                            s = "min";
      break;
    case MAX:
      jj_consume_token(MAX);
                                                                   s = "max";
      break;
    case REG_IDENT:
      s = Identifier();
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
                  func = new ExpressionFunc(s); func.setOldStyle(true);
    ExpressionFuncArgs(func);
    jj_consume_token(RPARENTH);
          func.setPosition(begin, getToken(0)); {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

// Arguments for a function in an expression
  static final public void ExpressionFuncArgs(ExpressionFunc func) throws ParseException {
        Expression expr;
    expr = Expression();
                              func.addOperand(expr);
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      expr = Expression();
                                                                                       func.addOperand(expr);
    }
  }

// Expression: identifier
  static final public Expression ExpressionIdent() throws ParseException {
        String ident;
        Expression ret;
    ident = Identifier();
          ret = new ExpressionIdent(ident); ret.setPosition(getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: literal
  static final public Expression ExpressionLiteral() throws ParseException {
        Expression ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG_INT:
      jj_consume_token(REG_INT);
                    ret = new ExpressionLiteral(Expression.INT, new Integer(getToken(0).image));
      break;
    case REG_DOUBLE:
      jj_consume_token(REG_DOUBLE);
                       ret = new ExpressionLiteral(Expression.DOUBLE, new Double(getToken(0).image), getToken(0).image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
                 ret = new ExpressionLiteral(Expression.BOOLEAN, new Boolean(true));
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  ret = new ExpressionLiteral(Expression.BOOLEAN, new Boolean(false));
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          ret.setPosition(getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Expression: parentheses
  static final public Expression ExpressionParenth() throws ParseException {
        Expression expr, ret;
        Token begin = null;
    begin = jj_consume_token(LPARENTH);
    expr = Expression();
    jj_consume_token(RPARENTH);
          ret = new ExpressionUnaryOp(ExpressionUnaryOp.PARENTH, expr); ret.setPosition(begin, getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Property stuff
//-----------------------------------------------------------------------------------

// Extra basic expressions allowed in properties
  static final public Expression ExpressionBasicProperties() throws ParseException {
        Expression ret;
          if (!parsingProperty) {if (true) throw generateParseException();}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PMAX:
    case PMIN:
    case P:
      ret = ExpressionProb();
      break;
    case S:
      ret = ExpressionSS();
      break;
    case RMAX:
    case RMIN:
    case R:
      ret = ExpressionReward();
      break;
    case DQUOTE:
      ret = ExpressionLabel();
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: probabilistic operator P
  static final public Expression ExpressionProb() throws ParseException {
        int r;
        String relOp = null;
        Expression prob = null;
        PathExpression pe;
        Filter filter = null;
        ExpressionProb ret = new ExpressionProb();
        Token begin = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P:
      begin = jj_consume_token(P);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:
        r = LtGt();
        prob = Expression();
                                                           relOp = ExpressionBinaryOp.opSymbols[r];
        break;
      case EQ:
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                 relOp = "=";
        break;
      case MIN:
        jj_consume_token(MIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                       relOp = "min=";
        break;
      case MAX:
        jj_consume_token(MAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                       relOp = "max=";
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PMIN:
      begin = jj_consume_token(PMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "min=";
      break;
    case PMAX:
      begin = jj_consume_token(PMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "max=";
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    pe = ExpressionProbContents();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      filter = Filter();
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
                ret.setRelOp(relOp);
                ret.setProb(prob);
                ret.setPathExpression(pe);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Filter for a P/S/R operator
  static final public Filter Filter() throws ParseException {
        Filter filter;
        Expression expr;
        Token begin = null;
    begin = jj_consume_token(LBRACE);
    expr = Expression();
                                               filter = new Filter(expr);
    jj_consume_token(RBRACE);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_26;
      }
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MIN:
        jj_consume_token(MIN);
                          filter.setMinRequested(true);
        break;
      case MAX:
        jj_consume_token(MAX);
                          filter.setMaxRequested(true);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
    }
          filter.setPosition(begin, getToken(0)); {if (true) return filter;}
    throw new Error("Missing return statement in function");
  }

// Path formulas which can go in a P operator
  static final public PathExpression ExpressionProbContents() throws ParseException {
        PathExpression pe;
    pe = PathExpressionTemporal();
          {if (true) return pe;}
    throw new Error("Missing return statement in function");
  }

// Temporal operarors (X, U, F, G)
  static final public PathExpression PathExpressionTemporal() throws ParseException {
        PathExpressionTemporal pe = new PathExpressionTemporal();
        Expression expr1 = null, expr2 = null;
        TimeBound tb = null;
        Token begin = null;
                  begin = getToken(0);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case X:
      jj_consume_token(X);
                              pe.setOperator(PathExpressionTemporal.P_X);
      break;
    case FALSE:
    case FUNC:
    case MAX:
    case MIN:
    case PMAX:
    case PMIN:
    case P:
    case RMAX:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case NOT:
    case LPARENTH:
    case MINUS:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENT:
      expr1 = Expression();
      jj_consume_token(U);
                                                     pe.setOperator(PathExpressionTemporal.P_U);
      break;
    case F:
      jj_consume_token(F);
                                pe.setOperator(PathExpressionTemporal.P_F);
      break;
    case G:
      jj_consume_token(G);
                                pe.setOperator(PathExpressionTemporal.P_G);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
    case LE:
    case GE:
      tb = TimeBound();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case FUNC:
    case MAX:
    case MIN:
    case PMAX:
    case PMIN:
    case P:
    case RMAX:
    case RMIN:
    case R:
    case S:
    case TRUE:
    case NOT:
    case LPARENTH:
    case MINUS:
    case DQUOTE:
    case REG_INT:
    case REG_DOUBLE:
    case REG_IDENT:
      expr2 = Expression();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
                if (tb != null) pe.setLowerBound(tb.lBound);
                if (tb != null) pe.setUpperBound(tb.uBound);
                if (expr1 != null) {
                        PathExpressionExpr pe1 = new PathExpressionExpr(expr1);
                        pe1.setPosition(expr1);
                        pe.setOperand1(pe1);
                }
                if (expr2 != null) {
                        PathExpressionExpr pe2 = new PathExpressionExpr(expr2);
                        pe2.setPosition(expr2);
                        pe.setOperand2(pe2);
                }

                // This is the usual case.
                if (expr2 != null) {
                        pe.setPosition(begin, getToken(0));
                        {if (true) return pe;}
                }
                // And this is a bit of inelegant jiggery-pokery.
                // The problem is that bounded path formulas sometimes need
                // two successive expressions with no separator, e.g. t and b in "F<=t b".
                // Parsing two successive expressions is tricky because:
                // 1. e.g. "t (b)" gets parsed a as single expression: function "t(b)"
                // 2. e.g. "-a -b" gets parsed as a single expression: subtraction "(-a)-b"
                // These are the only two problem cases. The cunning plan is to make the second
                // expression optional and then check if it is missing afterwards.
                // Note that case 2 is genuinely ambiguous (e.g. where to split "-a-b-c"?).
                // Fortunately this does not type check (the expression should be Boolean)
                // so we don't really care.
                else {
                        if (tb != null) {
                                if (tb.lBound == null) {
                                        if (tb.uBound instanceof ExpressionFunc && ((ExpressionFunc)tb.uBound).getNumOperands() == 1) {
                                                Expression actualBound = new ExpressionIdent(((ExpressionFunc)tb.uBound).getName());
                                                actualBound.setPosition(tb.uBound);
                                                actualBound.setEndColumn(actualBound.getBeginColumn()+((ExpressionFunc)tb.uBound).getName().length()-1);
                                                pe.setUpperBound(actualBound);
                                                Expression actualOperand2 = ((ExpressionFunc)tb.uBound).getOperand(0);
                                                actualOperand2 = Expression.Parenth(actualOperand2);
                                                actualOperand2.setPosition(((ExpressionFunc)tb.uBound).getOperand(0));
                                                PathExpressionExpr pe2 = new PathExpressionExpr(actualOperand2);
                                                pe2.setPosition(actualOperand2);
                                                pe.setOperand2(pe2);
                                                pe.setPosition(begin, getToken(0));
                                                {if (true) return pe;}
                                        }
                                }
                                if (tb.uBound == null) {
                                        if (tb.lBound instanceof ExpressionFunc && ((ExpressionFunc)tb.lBound).getNumOperands() == 1) {
                                                Expression actualBound = new ExpressionIdent(((ExpressionFunc)tb.lBound).getName());
                                                actualBound.setPosition(tb.lBound);
                                                actualBound.setEndColumn(actualBound.getBeginColumn()+((ExpressionFunc)tb.lBound).getName().length()-1);
                                                pe.setLowerBound(actualBound);
                                                Expression actualOperand2 = ((ExpressionFunc)tb.lBound).getOperand(0);
                                                actualOperand2 = Expression.Parenth(actualOperand2);
                                                actualOperand2.setPosition(((ExpressionFunc)tb.uBound).getOperand(0));
                                                PathExpressionExpr pe2 = new PathExpressionExpr(actualOperand2);
                                                pe2.setPosition(actualOperand2);
                                                pe.setOperand2(pe2);
                                                pe.setPosition(begin, getToken(0));
                                                {if (true) return pe;}
                                        }
                                }
                        }
                        {if (true) throw generateParseException();}
                }
    throw new Error("Missing return statement in function");
  }

// Time bound for temporal operators
  static final public TimeBound TimeBound() throws ParseException {
        TimeBound tb = new TimeBound();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LE:
      jj_consume_token(LE);
      tb.uBound = Expression();
      break;
    case GE:
      jj_consume_token(GE);
      tb.lBound = Expression();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      tb.lBound = Expression();
      jj_consume_token(COMMA);
      tb.uBound = Expression();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return tb;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: steady-state operator S
  static final public Expression ExpressionSS() throws ParseException {
        int r;
        String relOp = null;
        Expression prob = null;
        Expression expr;
        Filter filter = null;
        ExpressionSS ret = new ExpressionSS();
        Token begin;
    // Various options for "S" keyword and attached symbols
            begin = jj_consume_token(S);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case GT:
    case LE:
    case GE:
      r = LtGt();
      prob = Expression();
                                                   relOp = ExpressionBinaryOp.opSymbols[r];
      break;
    case EQ:
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                 relOp = "=";
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    expr = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      filter = Filter();
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
                ret.setRelOp(relOp);
                ret.setProb(prob);
                ret.setExpression(expr);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: expected reward operator R
  static final public Expression ExpressionReward() throws ParseException {
        int r;
        Object index = null;
        String relOp = null;
        Expression rew = null;
        PathExpression pe;
        Filter filter = null;
        ExpressionReward ret = new ExpressionReward();
        Token begin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case R:
      begin = jj_consume_token(R);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        index = RewardIndex();
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:
        r = LtGt();
        rew = Expression();
                                           relOp = ExpressionBinaryOp.opSymbols[r];
        break;
      case EQ:
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                             relOp = "=";
        break;
      case MIN:
        jj_consume_token(MIN);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                   relOp = "min=";
        break;
      case MAX:
        jj_consume_token(MAX);
        jj_consume_token(EQ);
        jj_consume_token(QMARK);
                                   relOp = "max=";
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case RMIN:
      begin = jj_consume_token(RMIN);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "min=";
      break;
    case RMAX:
      begin = jj_consume_token(RMAX);
      jj_consume_token(EQ);
      jj_consume_token(QMARK);
                                         relOp = "max=";
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    pe = ExpressionRewardContents();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      filter = Filter();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
                ret.setRewardStructIndex(index);
                ret.setRelOp(relOp);
                ret.setReward(rew);
                ret.setPathExpression(pe);
                ret.setFilter(filter);
                ret.setPosition(begin, getToken(0));
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// Reward struct index for R operator
  static final public Object RewardIndex() throws ParseException {
        Object index;
    jj_consume_token(LBRACE);
    if (jj_2_9(2147483647)) {
      jj_consume_token(DQUOTE);
      index = Identifier();
      jj_consume_token(DQUOTE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case FUNC:
      case MAX:
      case MIN:
      case PMAX:
      case PMIN:
      case P:
      case RMAX:
      case RMIN:
      case R:
      case S:
      case TRUE:
      case NOT:
      case LPARENTH:
      case MINUS:
      case DQUOTE:
      case REG_INT:
      case REG_DOUBLE:
      case REG_IDENT:
        index = Expression();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACE);
          {if (true) return index;}
    throw new Error("Missing return statement in function");
  }

// Contents of an R operator
  static final public PathExpression ExpressionRewardContents() throws ParseException {
        Expression expr = null;
        PathExpressionTemporal pe = null;
        Token begin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case C:
      begin = jj_consume_token(C);
      jj_consume_token(LE);
      expr = Expression();
                                                 pe = new PathExpressionTemporal(PathExpressionTemporal.R_C, null, null); pe.setUpperBound(expr);
      break;
    case I:
      begin = jj_consume_token(I);
      jj_consume_token(EQ);
      expr = Expression();
                                                 pe = new PathExpressionTemporal(PathExpressionTemporal.R_I, null, null); pe.setUpperBound(expr);
      break;
    case F:
      begin = jj_consume_token(F);
      expr = Expression();
                                            pe = new PathExpressionTemporal(PathExpressionTemporal.R_F, null, new PathExpressionExpr(expr));
      break;
    case S:
      begin = jj_consume_token(S);
                        pe = new PathExpressionTemporal(PathExpressionTemporal.R_S, null, null);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          pe.setPosition(begin, getToken(0)); {if (true) return pe;}
    throw new Error("Missing return statement in function");
  }

// (Property) expression: label (including "init")
  static final public Expression ExpressionLabel() throws ParseException {
        String s;
        ExpressionLabel ret = null;
        Token begin;
    begin = jj_consume_token(DQUOTE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REG_IDENT:
      s = Identifier();
      break;
    case INIT:
      jj_consume_token(INIT);
                                                       s = "init";
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DQUOTE);
          ret = new ExpressionLabel(s); ret.setPosition(begin, getToken(0)); {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

//-----------------------------------------------------------------------------------
// Miscellaneous stuff
//-----------------------------------------------------------------------------------

// Identifier
  static final public String Identifier() throws ParseException {
    jj_consume_token(REG_IDENT);
                      {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

// Primed identifier
  static final public ExpressionIdent IdentifierPrime() throws ParseException {
    jj_consume_token(REG_IDENTPRIME);
                // Remove prime, create new ident and return
                String s = getToken(0).image;
                s = s.substring(0, s.length()-1);
                ExpressionIdent expr = new ExpressionIdent(s);
                expr.setPosition(token);
                expr.setEndColumn(expr.getEndColumn() - 1);
                {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Equality operators: =, !=
  static final public int EqNeq() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
              {if (true) return ExpressionBinaryOp.EQ;}
      break;
    case NE:
      jj_consume_token(NE);
              {if (true) return ExpressionBinaryOp.NE;}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Relational operators: >, <, >=, <=
  static final public int LtGt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
              {if (true) return ExpressionBinaryOp.GT;}
      break;
    case LT:
      jj_consume_token(LT);
              {if (true) return ExpressionBinaryOp.LT;}
      break;
    case GE:
      jj_consume_token(GE);
               {if (true) return ExpressionBinaryOp.GE;}
      break;
    case LE:
      jj_consume_token(LE);
              {if (true) return ExpressionBinaryOp.LE;}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// For loop
  static final public ForLoop ForLoop() throws ParseException {
        String s;
        Expression from = null, to = null, step = null;
        ForLoop fl = new ForLoop();
        Token begin;
            begin = getToken(1);
    s = Identifier();
    jj_consume_token(EQ);
    from = Expression();
    jj_consume_token(COLON);
    to = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      step = Expression();
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    jj_consume_token(0);
                fl.setLHS(s);
                fl.setFrom(from);
                fl.setTo(to);
                if (step != null) fl.setStep(step);
                fl.setPosition(begin, getToken(0));
                {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_scan_token(F)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_3R_80()) return true;
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_scan_token(I)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_3R_121()) return true;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(C)) return true;
    if (jj_scan_token(LE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_3R_79()) return true;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_scan_token(DQUOTE)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_3R_78()) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_3R_77()) return true;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_3R_76()) return true;
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_3R_75()) return true;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static final private boolean jj_3R_121() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_3R_68()) return true;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_3R_138()) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_28()) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_3R_53()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_126() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_scan_token(RMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_125() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_scan_token(RMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_124() {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_119() {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_108() {
    if (jj_3R_121()) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_scan_token(MIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    if (jj_3R_56()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static final private boolean jj_3R_123() {
    if (jj_3R_53()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_scan_token(PMAX)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_scan_token(R)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_scan_token(PMIN)) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_112()) return true;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_scan_token(P)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_104()) return true;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_scan_token(OR)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    if (jj_3R_51()) return true;
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_3R_100()) return true;
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_3R_99()) return true;
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_3R_98()) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_scan_token(EQ)) return true;
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_3R_53()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_3R_97()) return true;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_3R_27()) return true;
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_scan_token(S)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_33()) return true;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static final private boolean jj_3R_145() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(MODULE)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_3R_50()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_3R_45()) return true;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_scan_token(REG_DOUBLE)) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_scan_token(REG_INT)) return true;
    return false;
  }

  static final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_scan_token(LABEL)) return true;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_scan_token(INIT)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(LABEL)) return true;
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_scan_token(FUNC)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    if (jj_scan_token(REG_IDENTPRIME)) return true;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_3R_27()) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_scan_token(IMPLIES)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_scan_token(G)) return true;
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_scan_token(F)) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(U)) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_scan_token(REG_IDENT)) return true;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_scan_token(X)) return true;
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_3R_139()) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPARENTH)) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_scan_token(DQUOTE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    if (jj_scan_token(DQUOTE)) return true;
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_3R_121()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public PrismParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[77];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x154a4130,0x11424130,0x4080000,0xe2c0a010,0x0,0xe2c0a010,0xe2c0a010,0x0,0xe2c0a010,0x11000120,0x200088,0x200088,0x0,0x10,0x0,0x80000,0x80000,0x8,0x0,0x0,0x0,0x0,0xe280a000,0x0,0x0,0x0,0x2800000,0x2800000,0xe280a000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe280a000,0x0,0x0,0x0,0x0,0x0,0x0,0xe280a000,0xe280a000,0x0,0x2800000,0x2800000,0x0,0x2000,0xe0000000,0x2800000,0xe0000000,0x0,0x0,0x2800000,0xea85a000,0x0,0xe280a000,0x0,0x0,0x0,0x0,0x2800000,0x0,0x0,0xe280a000,0x110040,0x80000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x30f,0x107,0x208,0x2014f6,0x40000,0x2014f6,0x2014f6,0x40000,0x2014f6,0x101,0x0,0x0,0x6,0x6,0x8000000,0x0,0x0,0x800000,0x0,0x800000,0x0,0x0,0x2014f0,0x2000,0x200400,0x80000,0x0,0x0,0xa014f0,0x0,0x800000,0x80000,0x2000000,0x80000,0x80000,0x2000000,0x200000,0x0,0x8000,0x4000,0x2000,0x2014f0,0x18000000,0xe0000000,0x0,0x0,0x0,0x0,0x2004f0,0x2004f0,0x200000,0x0,0x0,0x80000,0x400,0xf0,0xe8000000,0x0,0x2000000,0x2000000,0x0,0x2014f0,0x80800000,0x2014f0,0x80800000,0xe8000000,0x2000000,0x2000000,0xe8000000,0x70,0x2000000,0x2014f0,0x80,0x0,0x18000000,0xe0000000,0x20000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1704,0x0,0x1704,0x1704,0x0,0x1704,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x1000,0x2,0x1704,0x0,0x0,0x0,0x1000,0x1000,0x1704,0x1000,0x0,0x0,0x10,0x0,0x0,0x10,0x1000,0x80,0x0,0x0,0x0,0x1704,0x0,0x1,0x6,0x6,0x18,0x18,0x1704,0x1700,0x0,0x0,0x1000,0x0,0x600,0x100,0x1,0x0,0x0,0x0,0x0,0x1704,0x1,0x1704,0x1,0x1,0x0,0x0,0x1,0x0,0x0,0x1704,0x0,0x1000,0x0,0x1,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public PrismParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PrismParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PrismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 77; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 77; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrismParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrismParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 77; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 77; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PrismParser(PrismParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 77; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PrismParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 77; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[79];
    for (int i = 0; i < 79; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 77; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 79; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
