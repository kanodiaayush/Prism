/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class hybrid_PrismHybrid */

#ifndef _Included_hybrid_PrismHybrid
#define _Included_hybrid_PrismHybrid
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_FreeGlobalRefs
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1FreeGlobalRefs
  (JNIEnv *, jclass);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetCUDDManager
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetCUDDManager
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetMainLog
 * Signature: (Lprism/PrismLog;)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetMainLog
  (JNIEnv *, jclass, jobject);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetTechLog
 * Signature: (Lprism/PrismLog;)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetTechLog
  (JNIEnv *, jclass, jobject);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetLinEqMethod
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetLinEqMethod
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetLinEqMethodParam
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetLinEqMethodParam
  (JNIEnv *, jclass, jdouble);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetTermCrit
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetTermCrit
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetTermCritParam
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetTermCritParam
  (JNIEnv *, jclass, jdouble);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetMaxIters
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetMaxIters
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetSBMaxMem
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetSBMaxMem
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetNumSBLevels
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetNumSBLevels
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetSORMaxMem
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetSORMaxMem
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetNumSORLevels
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetNumSORLevels
  (JNIEnv *, jclass, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SetCompact
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_hybrid_PrismHybrid_PH_1SetCompact
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_GetErrorMessage
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_hybrid_PrismHybrid_PH_1GetErrorMessage
  (JNIEnv *, jclass);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_ProbBoundedUntil
 * Signature: (IIIIIIIII)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1ProbBoundedUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_ProbUntil
 * Signature: (IIIIIIII)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1ProbUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_ProbReachReward
 * Signature: (IIIIIIIIIII)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1ProbReachReward
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_NondetBoundedUntil
 * Signature: (IIIIIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1NondetBoundedUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_NondetUntil
 * Signature: (IIIIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1NondetUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_NondetReachReward
 * Signature: (IIIIIIIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1NondetReachReward
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_StochBoundedUntil
 * Signature: (IIIIIIIIDI)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1StochBoundedUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jdouble, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_StochCumulReward
 * Signature: (IIIIIIIID)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1StochCumulReward
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jdouble);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_StochSteadyState
 * Signature: (IIIIIII)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1StochSteadyState
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_StochTransient
 * Signature: (IIIIIIID)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1StochTransient
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jdouble);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_Power
 * Signature: (IIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1Power
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_JOR
 * Signature: (IIIIIIIIZZD)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1JOR
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jboolean, jboolean, jdouble);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_SOR
 * Signature: (IIIIIIIIZZDZ)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1SOR
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jboolean, jboolean, jdouble, jboolean);

/*
 * Class:     hybrid_PrismHybrid
 * Method:    PH_PSOR
 * Signature: (IIIIIIIIZZDZ)I
 */
JNIEXPORT jint JNICALL Java_hybrid_PrismHybrid_PH_1PSOR
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jboolean, jboolean, jdouble, jboolean);

#ifdef __cplusplus
}
#endif
#endif
