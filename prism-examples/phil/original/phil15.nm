// randomized dining philosophers [LR81]
// dxp/gxn 12/12/99

nondeterministic

// atomic formulae 
// left fork free and right fork free resp.
formula lfree = p2=0..4,6,10;
formula rfree = p15=0..3,5,7,11;

module phil1

	p1: [0..11];

	[] p1=0 -> (p1'=0); // stay thinking
	[] p1=0 -> (p1'=1); // trying
	[] p1=1 -> 0.5 : (p1'=2) + 0.5 : (p1'=3); // draw randomly
	[] p1=2 &  lfree -> (p1'=4); // pick up left
	[] p1=2 &  !lfree -> (p1'=2); // left not free
	[] p1=3 &  rfree -> (p1'=5); // pick up right
	[] p1=3 &  !rfree -> (p1'=3); // right not free
	[] p1=4 &  rfree -> (p1'=8); // pick up right (got left)
	[] p1=4 & !rfree -> (p1'=6); // right not free (got left)
	[] p1=5 &  lfree -> (p1'=8); // pick up left (got right)
	[] p1=5 & !lfree -> (p1'=7); // left not free (got right)
	[] p1=6  -> (p1'=1); // put down left
	[] p1=7  -> (p1'=1); // put down right
	[] p1=8  -> (p1'=9); // move to eating (got forks)
	[] p1=9  -> (p1'=10); // finished eating and put down left 
	[] p1=9  -> (p1'=11); // finished eating and put down right
	[] p1=10 -> (p1'=0); // put down right and return to think
	[] p1=11 -> (p1'=0); // put down left and return to think

endmodule

// construct further modules through renaming
module phil2  = phil1 [p1=p2,  p2=p3,  p15=p1]  endmodule
module phil3  = phil1 [p1=p3,  p2=p4,  p15=p2]  endmodule
module phil4  = phil1 [p1=p4,  p2=p5,  p15=p3]  endmodule
module phil5  = phil1 [p1=p5,  p2=p6,  p15=p4]  endmodule
module phil6  = phil1 [p1=p6,  p2=p7,  p15=p5]  endmodule
module phil7  = phil1 [p1=p7,  p2=p8,  p15=p6]  endmodule
module phil8  = phil1 [p1=p8,  p2=p9,  p15=p7]  endmodule
module phil9  = phil1 [p1=p9,  p2=p10, p15=p8]  endmodule
module phil10 = phil1 [p1=p10, p2=p11, p15=p9]  endmodule
module phil11 = phil1 [p1=p11, p2=p12, p15=p10] endmodule
module phil12 = phil1 [p1=p12, p2=p13, p15=p11] endmodule
module phil13 = phil1 [p1=p13, p2=p14, p15=p12] endmodule
module phil14 = phil1 [p1=p14, p2=p15, p15=p13] endmodule
module phil15 = phil1 [p1=p15, p2=p1,  p15=p14] endmodule
