// Output from the PEPA-to-PRISM compiler
// Version 0.03.1 "Balerno"
// Released: 24-10-2002
// 
// Model file: TESTS/auction

// All PEPA models define CTMCs so mark this as a stochastic model 
stochastic

// The rates used in the model 
rate su = 9.0;
rate sd = 9.0;
rate st = 2.0;
rate s = 1.0;
rate pr = 1.2;
rate ppr = 0.8;
rate qr = 1.2;
rate qqr = 0.8;
rate r = 2.0;


// Information about components inferred by the compiler
// during static analysis:
//
//    interface CNode
//      activity forward_accept'
//      activity forward_bid_nc
//      activity forward_preq_nc
//      activity forward_presp'
//      activity forward_reject'
//    endinterface 
//    interface Node
//      activity forward_accept
//      activity forward_bid
//      activity forward_preq
//      activity forward_presp
//      activity forward_reject
//    endinterface 
//    interface Server
//      activity accept_s
//      activity accept_sc
//      activity presp_s
//      activity presp_sc
//      activity reject_s
//      activity reject_sc
//    endinterface 
//    interface TNode
//      activity forward_accept
//      activity forward_accept_sc
//      activity forward_bid_cs
//      activity forward_preq_cs
//      activity forward_presp
//      activity forward_presp_sc
//      activity forward_reject
//      activity forward_reject_sc
//    endinterface 

//    interface Bidder
//      activity bid_in
//      activity preq_in
//    endinterface 
//    interface Bidder_CN
//      activity bid'_in
//      activity preq'_in
//    endinterface 


// Descriptive names for the local states of
// this module, taken from the PEPA input model
const Server = 0;
const Server' = 1;
const Server'' = 2;
const Server1 = 3;
const Server2 = 4;
module Server

        Server_STATE : [0..4] init Server;

        [forward_bid] (Server_STATE=Server) -> 1 : (Server_STATE'=Server');
        [forward_bid_cs] (Server_STATE=Server) -> 1 : (Server_STATE'=Server'');
        [forward_preq] (Server_STATE=Server) -> 1 : (Server_STATE'=Server1);
        [forward_preq_cs] (Server_STATE=Server) -> 1 : (Server_STATE'=Server2);
        [accept_s] (Server_STATE=Server') -> pr : (Server_STATE'=Server);
        [reject_s] (Server_STATE=Server') -> ppr : (Server_STATE'=Server);
        [accept_sc] (Server_STATE=Server'') -> qr : (Server_STATE'=Server);
        [reject_sc] (Server_STATE=Server'') -> qqr : (Server_STATE'=Server);
        [presp_s] (Server_STATE=Server1) -> r : (Server_STATE'=Server);
        [presp_sc] (Server_STATE=Server2) -> r : (Server_STATE'=Server);

endmodule

// Descriptive names for the local states of
// this module, taken from the PEPA input model
const Bidder = 0;
const WaitingBid = 1;
const WaitingPrice = 2;
module Bidder

        Bidder_STATE : [0..2] init Bidder;

        [bid_in] (Bidder_STATE=Bidder) -> su : (Bidder_STATE'=WaitingBid);
        [preq_in] (Bidder_STATE=Bidder) -> sd : (Bidder_STATE'=WaitingPrice);
        [forward_accept] (Bidder_STATE=WaitingBid) -> 1 : (Bidder_STATE'=Bidder);
        [forward_reject] (Bidder_STATE=WaitingBid) -> 1 : (Bidder_STATE'=Incorrect);
        [forward_presp] (Bidder_STATE=WaitingPrice) -> 1 : (Bidder_STATE'=Bidder);

endmodule

// We make another copy of module Bidder
module Bidder_2 = Bidder[Bidder_STATE=Bidder_2_STATE]
endmodule

// Descriptive names for the local states of
// this module, taken from the PEPA input model
const TNode = 0;
const TNode1 = 1;
const TNode10 = 2;
const TNode11 = 3;
const TNode2 = 4;
const TNode3 = 5;
const TNode4 = 6;
const TNode5 = 7;
const TNode6 = 8;
const TNode7 = 9;
const TNode8 = 10;
const TNode9 = 11;
module TNode

        TNode_STATE : [0..11] init TNode;

        [bid_in] (TNode_STATE=TNode) -> 1 : (TNode_STATE'=TNode1);
        [forward_bid_nc] (TNode_STATE=TNode) -> 1 : (TNode_STATE'=TNode1);
        [preq_in] (TNode_STATE=TNode) -> 1 : (TNode_STATE'=TNode2);
        [forward_preq_nc] (TNode_STATE=TNode) -> 1 : (TNode_STATE'=TNode2);
        [accept_sc] (TNode_STATE=TNode) -> 1 : (TNode_STATE'=TNode3);
        [reject_sc] (TNode_STATE=TNode) -> 1 : (TNode_STATE'=TNode4);
        [presp_sc] (TNode_STATE=TNode) -> 1 : (TNode_STATE'=TNode5);
        [forward_bid_cs] (TNode_STATE=TNode1) -> s : (TNode_STATE'=TNode);
        [presp_sc] (TNode_STATE=TNode1) -> 1 : (TNode_STATE'=TNode6);
        [accept_sc] (TNode_STATE=TNode1) -> 1 : (TNode_STATE'=TNode7);
        [reject_sc] (TNode_STATE=TNode1) -> 1 : (TNode_STATE'=TNode8);
        [forward_accept_sc] (TNode_STATE=TNode10) -> s : (TNode_STATE'=TNode2);
        [forward_accept] (TNode_STATE=TNode10) -> s : (TNode_STATE'=TNode2);
        [forward_reject_sc] (TNode_STATE=TNode11) -> s : (TNode_STATE'=TNode2);
        [forward_reject] (TNode_STATE=TNode11) -> s : (TNode_STATE'=TNode2);
        [forward_preq_cs] (TNode_STATE=TNode2) -> s : (TNode_STATE'=TNode);
        [presp_sc] (TNode_STATE=TNode2) -> 1 : (TNode_STATE'=TNode9);
        [accept_sc] (TNode_STATE=TNode2) -> 1 : (TNode_STATE'=TNode10);
        [reject_sc] (TNode_STATE=TNode2) -> 1 : (TNode_STATE'=TNode11);
        [forward_accept_sc] (TNode_STATE=TNode3) -> s : (TNode_STATE'=TNode);
        [forward_accept] (TNode_STATE=TNode3) -> s : (TNode_STATE'=TNode);
        [forward_reject_sc] (TNode_STATE=TNode4) -> s : (TNode_STATE'=TNode);
        [forward_reject] (TNode_STATE=TNode4) -> s : (TNode_STATE'=TNode);
        [forward_presp_sc] (TNode_STATE=TNode5) -> s : (TNode_STATE'=TNode);
        [forward_presp] (TNode_STATE=TNode5) -> s : (TNode_STATE'=TNode);
        [forward_presp_sc] (TNode_STATE=TNode6) -> s : (TNode_STATE'=TNode1);
        [forward_presp] (TNode_STATE=TNode6) -> s : (TNode_STATE'=TNode1);
        [forward_accept_sc] (TNode_STATE=TNode7) -> s : (TNode_STATE'=TNode1);
        [forward_accept] (TNode_STATE=TNode7) -> s : (TNode_STATE'=TNode1);
        [forward_reject_sc] (TNode_STATE=TNode8) -> s : (TNode_STATE'=TNode1);
        [forward_reject] (TNode_STATE=TNode8) -> s : (TNode_STATE'=TNode1);
        [forward_presp_sc] (TNode_STATE=TNode9) -> s : (TNode_STATE'=TNode2);
        [forward_presp] (TNode_STATE=TNode9) -> s : (TNode_STATE'=TNode2);

endmodule

// Descriptive names for the local states of
// this module, taken from the PEPA input model
const CNode = 0;
const CNode1 = 1;
const CNode10 = 2;
const CNode11 = 3;
const CNode2 = 4;
const CNode3 = 5;
const CNode4 = 6;
const CNode5 = 7;
const CNode6 = 8;
const CNode7 = 9;
const CNode8 = 10;
const CNode9 = 11;
module CNode

        CNode_STATE : [0..11] init CNode;

        [bid'_in] (CNode_STATE=CNode) -> 1 : (CNode_STATE'=CNode1);
        [preq'_in] (CNode_STATE=CNode) -> 1 : (CNode_STATE'=CNode2);
        [forward_accept_sc] (CNode_STATE=CNode) -> 1 : (CNode_STATE'=CNode3);
        [forward_reject_sc] (CNode_STATE=CNode) -> 1 : (CNode_STATE'=CNode4);
        [forward_presp_sc] (CNode_STATE=CNode) -> 1 : (CNode_STATE'=CNode5);
        [forward_bid_nc] (CNode_STATE=CNode1) -> s : (CNode_STATE'=CNode);
        [forward_accept_sc] (CNode_STATE=CNode1) -> 1 : (CNode_STATE'=CNode6);
        [forward_reject_sc] (CNode_STATE=CNode1) -> 1 : (CNode_STATE'=CNode7);
        [forward_presp_sc] (CNode_STATE=CNode1) -> 1 : (CNode_STATE'=CNode8);
        [forward_reject'] (CNode_STATE=CNode10) -> s : (CNode_STATE'=CNode2);
        [forward_presp'] (CNode_STATE=CNode11) -> s : (CNode_STATE'=CNode2);
        [forward_preq_nc] (CNode_STATE=CNode2) -> s : (CNode_STATE'=CNode);
        [forward_accept_sc] (CNode_STATE=CNode2) -> 1 : (CNode_STATE'=CNode9);
        [forward_reject_sc] (CNode_STATE=CNode2) -> 1 : (CNode_STATE'=CNode10);
        [forward_presp_sc] (CNode_STATE=CNode2) -> 1 : (CNode_STATE'=CNode11);
        [forward_accept'] (CNode_STATE=CNode3) -> s : (CNode_STATE'=CNode);
        [forward_reject'] (CNode_STATE=CNode4) -> s : (CNode_STATE'=CNode);
        [forward_presp'] (CNode_STATE=CNode5) -> s : (CNode_STATE'=CNode);
        [forward_accept'] (CNode_STATE=CNode6) -> s : (CNode_STATE'=CNode1);
        [forward_reject'] (CNode_STATE=CNode7) -> s : (CNode_STATE'=CNode1);
        [forward_presp'] (CNode_STATE=CNode8) -> s : (CNode_STATE'=CNode1);
        [forward_accept'] (CNode_STATE=CNode9) -> s : (CNode_STATE'=CNode2);

endmodule

// Descriptive names for the local states of
// this module, taken from the PEPA input model
const Bidder_CN = 0;
const WaitingBid_CN = 1;
const WaitingPrice_CN = 2;
module Bidder_CN

        Bidder_CN_STATE : [0..2] init Bidder_CN;

        [bid'_in] (Bidder_CN_STATE=Bidder_CN) -> su : (Bidder_CN_STATE'=WaitingBid_CN);
        [preq'_in] (Bidder_CN_STATE=Bidder_CN) -> sd : (Bidder_CN_STATE'=WaitingPrice_CN);
        [forward_accept'] (Bidder_CN_STATE=WaitingBid_CN) -> 1 : (Bidder_CN_STATE'=Bidder_CN);
        [forward_reject'] (Bidder_CN_STATE=WaitingBid_CN) -> 1 : (Bidder_CN_STATE'=Incorrect_CN);
        [forward_presp'] (Bidder_CN_STATE=WaitingPrice_CN) -> 1 : (Bidder_CN_STATE'=Bidder_CN);

endmodule

// We make another copy of module Bidder_CN
module Bidder_CN_2 = Bidder_CN[Bidder_CN_STATE=Bidder_CN_2_STATE]
endmodule

// Descriptive names for the local states of
// this module, taken from the PEPA input model
const Node = 0;
const Node1 = 1;
const Node10 = 2;
const Node11 = 3;
const Node2 = 4;
const Node3 = 5;
const Node4 = 6;
const Node5 = 7;
const Node6 = 8;
const Node7 = 9;
const Node8 = 10;
const Node9 = 11;
module Node

        Node_STATE : [0..11] init Node;

        [bid_in] (Node_STATE=Node) -> 1 : (Node_STATE'=Node1);
        [preq_in] (Node_STATE=Node) -> 1 : (Node_STATE'=Node2);
        [accept_s] (Node_STATE=Node) -> 1 : (Node_STATE'=Node3);
        [reject_s] (Node_STATE=Node) -> 1 : (Node_STATE'=Node4);
        [presp_s] (Node_STATE=Node) -> 1 : (Node_STATE'=Node5);
        [forward_bid] (Node_STATE=Node1) -> s : (Node_STATE'=Node);
        [presp_s] (Node_STATE=Node1) -> 1 : (Node_STATE'=Node6);
        [accept_s] (Node_STATE=Node1) -> 1 : (Node_STATE'=Node7);
        [reject_s] (Node_STATE=Node1) -> 1 : (Node_STATE'=Node8);
        [forward_accept] (Node_STATE=Node10) -> s : (Node_STATE'=Node2);
        [forward_reject] (Node_STATE=Node11) -> s : (Node_STATE'=Node2);
        [forward_preq] (Node_STATE=Node2) -> s : (Node_STATE'=Node);
        [presp_s] (Node_STATE=Node2) -> 1 : (Node_STATE'=Node9);
        [accept_s] (Node_STATE=Node2) -> 1 : (Node_STATE'=Node10);
        [reject_s] (Node_STATE=Node2) -> 1 : (Node_STATE'=Node11);
        [forward_accept] (Node_STATE=Node3) -> s : (Node_STATE'=Node);
        [forward_reject] (Node_STATE=Node4) -> s : (Node_STATE'=Node);
        [forward_presp] (Node_STATE=Node5) -> s : (Node_STATE'=Node);
        [forward_presp] (Node_STATE=Node6) -> s : (Node_STATE'=Node1);
        [forward_accept] (Node_STATE=Node7) -> s : (Node_STATE'=Node1);
        [forward_reject] (Node_STATE=Node8) -> s : (Node_STATE'=Node1);
        [forward_presp] (Node_STATE=Node9) -> s : (Node_STATE'=Node2);

endmodule

// We make another copy of module Bidder
module Bidder_3 = Bidder[Bidder_STATE=Bidder_3_STATE]
endmodule

// We make another copy of module Bidder
module Bidder_4 = Bidder[Bidder_STATE=Bidder_4_STATE]
endmodule


// The system equation
system
        (((Server |[accept_sc, reject_sc, presp_sc, forward_bid_cs, forward_preq_cs]| ((Bidder ||| Bidder_2) |[bid_in, forward_accept, forward_reject, preq_in, forward_presp]| TNode)) |[forward_bid_nc, forward_accept_sc, forward_reject_sc, forward_preq_nc, forward_presp_sc]| (CNode |[bid'_in, preq'_in, forward_accept', forward_reject', forward_presp']| (Bidder_CN ||| Bidder_CN_2))) |[accept_s, reject_s, presp_s, forward_preq, forward_bid]| (Node |[bid_in, preq_in, forward_accept, forward_reject, forward_presp]| (Bidder_3 ||| Bidder_4)))
endsystem

// End of output from the PEPA-to-PRISM compiler
