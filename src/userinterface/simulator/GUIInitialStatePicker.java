//==============================================================================
//
//	Copyright (c) 2004-2005, Andrew Hinton
//
//	This file is part of PRISM.
//
//	PRISM is free software; you can redistribute it and/or modify
//	it under the terms of the GNU General Public License as published by
//	the Free Software Foundation; either version 2 of the License, or
//	(at your option) any later version.
//
//	PRISM is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with PRISM; if not, write to the Free Software Foundation,
//	Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//==============================================================================

package userinterface.simulator;
import parser.*;
import prism.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.util.*;
import java.awt.event.*;
import userinterface.*;

public class GUIInitialStatePicker extends javax.swing.JDialog implements KeyListener
{
    
	//STATICS
    
	public static final int NO_VALUES = 0;
	public static final int VALUES_DONE = 1;
	public static final int CANCELLED = 2;
    
	
    
	//ATTRIBUTES
    
	private boolean cancelled = true;
    
	private JTable initValuesTable;
	private DefineValuesTable initValuesModel;
    
	private Action okAction;
	private Action cancelAction;
	
	Values initialState;
    
	
    
	private GUIPrism gui;
    
	private ModulesFile mf;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton cancelButton;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JPanel jPanel3;
    javax.swing.JPanel jPanel4;
    javax.swing.JPanel jPanel5;
    javax.swing.JPanel jPanel6;
    javax.swing.JPanel jPanel7;
    javax.swing.JButton okayButton;
    javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
    
	/** Creates new form GUIConstantsPicker */
	public GUIInitialStatePicker(GUIPrism parent, Values defaultInitial, ModulesFile mf)
	{
		super(parent, "Simulation Parameters", true);
        
		this.gui = parent;
		this.mf = mf;
        
		//setup tables
		initValuesModel = new DefineValuesTable();
		initValuesTable = new JTable();
        
        
		initValuesTable.setModel(initValuesModel);
        
		initValuesTable.setSelectionMode(DefaultListSelectionModel.SINGLE_INTERVAL_SELECTION);
        
		initValuesTable.setCellSelectionEnabled(true);
        
        
		this.initialState = defaultInitial;
	
	
		//initialise
		initComponents();
		initTable();
		initValues();
		
		
		setResizable(false);
        
		pack();
	}
    
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel6 = new javax.swing.JPanel();
        okayButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();

        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okayButton.setText("Okay");
        okayButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okayButtonActionPerformed(evt);
            }
        });

        jPanel6.add(okayButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel6.add(cancelButton);

        getContentPane().add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Initial State"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel1.add(jPanel5, gridBagConstraints);

        topPanel.setLayout(new java.awt.BorderLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(topPanel, gridBagConstraints);

        jPanel7.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
                    
	
    
	public static double log(double base, double x)
	{
		return Math.log(x) / Math.log(base);
	}
    
	private void initTable()
	{
		JScrollPane sp = new JScrollPane();
        
		sp.setViewportView(initValuesTable);
		topPanel.add(sp);
        
		topPanel.setPreferredSize(new Dimension(300,300));
	}
    
	private void initValues()
	{
        
		Value v;
		if(initialState == null)
		{
            
			int n,i,j,n2;
			Declaration decl;
			Module module;
            
			// first add all globals
			n = mf.getNumGlobals();
			for (i = 0; i < n; i++)
			{
				decl = mf.getGlobal(i);
				v = new Value(decl.getName(), decl.getType(), "");
				initValuesModel.addValue(v);
			}
			// then add all module variables
			n = mf.getNumModules();
			for (i = 0; i < n; i++)
			{
				module = mf.getModule(i);
				n2 = module.getNumDeclarations();
				for (j = 0; j < n2; j++)
				{
					decl = module.getDeclaration(j);
					v = new Value(decl.getName(), decl.getType(), "");
					initValuesModel.addValue(v);
				}
			}
            
		}
		else
		{
			for(int i = 0; i < initialState.getNumValues(); i++)
			{
				try
				{
					if(initialState.getType(i) == Expression.BOOLEAN)
						v = new Value(initialState.getName(i), Expression.BOOLEAN, new Boolean(initialState.getBooleanValue(i)));
					else
						v = new Value(initialState.getName(i), Expression.INT, new Integer(initialState.getIntValue(i)));
                    
					initValuesModel.addValue(v);
				}
				catch(Exception e)
				{}
			}
		}

		
	}
    
	/** Call this static method to construct a new GUIValuesPicker to define
	 *  initialState.  If you don't want any default values, then pass in null for
	 *  initDefaults
	 */
	public static Values defineInitalValuesWithDialog(GUIPrism parent, Values initDefaults, ModulesFile mf)
	{
		return new GUIInitialStatePicker(parent, initDefaults, mf).defineValues();
	}
    
	public Values defineValues()
	{
		show();
		if(cancelled) return null;
		else return initialState;
	}
    
	private void okayButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okayButtonActionPerformed
	{//GEN-HEADEREND:event_okayButtonActionPerformed
		int i, n;
		Value c;
            
		
            
		if(initValuesTable.getCellEditor() != null)initValuesTable.getCellEditor().stopCellEditing();
            
            
		String parameter = "";
		try
		{
			
                
			Values newInitState = new Values();
                
			//check each value of values
			for(i = 0; i < initValuesModel.getNumValues(); i++)
			{
				parameter = initValuesModel.getValue(i).name;
				if(initValuesModel.getValue(i).type == Expression.INT)
					newInitState.addValue(initValuesModel.getValue(i).name, new Integer(initValuesModel.getValue(i).value.toString()));
				else
					newInitState.addValue(initValuesModel.getValue(i).name, new Boolean(initValuesModel.getValue(i).value.toString()));
			}
			initialState = newInitState;
                
			
			cancelled = false;
                
			
			dispose();
		}
		catch(NumberFormatException e)
		{
			gui.errorDialog("Invalid number value entered for "+parameter+" parameter");
		}
	}//GEN-LAST:event_okayButtonActionPerformed
        
	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
	{//GEN-HEADEREND:event_cancelButtonActionPerformed
		dispose();
	}//GEN-LAST:event_cancelButtonActionPerformed
        
	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt)//GEN-FIRST:event_closeDialog
	{
		setVisible(false);
		dispose();
	}//GEN-LAST:event_closeDialog

	public void keyPressed(KeyEvent e)
	{
	}	
        
	public void keyReleased(KeyEvent e)
	{
		
	}
	
	public void keyTyped(KeyEvent e)
	{
	    
	}
	
	class DefineValuesTable extends AbstractTableModel
	{
		ArrayList values;
            
		public DefineValuesTable()
		{
			values = new ArrayList();
		}
            
		public void addValue(Value v)
		{
			values.add(v);
			fireTableRowsInserted(values.size()-1, values.size()-1);
		}
            
		public int getNumValues()
		{
			return values.size();
		}
            
		public Value getValue(int i)
		{
			return (Value)values.get(i);
		}
            
		public int getColumnCount()
		{
			return 3;
		}
            
		public int getRowCount()
		{
			return values.size();
		}
            
		public Object getValueAt(int rowIndex, int columnIndex)
		{
                
			Value v = (Value)values.get(rowIndex);
			switch(columnIndex)
			{
				case 0: return v.name;
				case 1:
					{
					switch(v.type)
					{
						case Expression.INT: return "int";
						case Expression.DOUBLE: return "double";
						case Expression.BOOLEAN: return "boolean";
						default: return "";
					}
				}
				case 2: return v.value.toString();
				default: return "";
			}
		}
            
		public String getColumnName(int columnIndex)
		{
			switch(columnIndex)
			{
				case 0: return "Name";
				case 1: return "Type";
				case 2: return "Value";
				default: return "";
			}
		}
            
		public boolean isCellEditable(int rowIndex, int columnIndex)
		{
			if(columnIndex == 2) return true;
			else return false;
		}
            
		public void setValueAt(Object aValue, int rowIndex, int columnIndex)
		{
			if(columnIndex == 2)
			{
				Value v = (Value)values.get(rowIndex);
				String s = (String)aValue;
				v.value = s;
				fireTableCellUpdated(rowIndex, columnIndex);
			}
		}
            
		public String toString()
		{
			String str = "";
			for(int i = 0 ; i < values.size(); i++)
			{
				Value c = (Value)values.get(i);
				str+=c.toString();
				if(i!= values.size()-1) str+=",";
			}
			return str;
		}
            
	}
        
	class Value
	{
		String name;
		int type;
		Object value;
            
		public Value(String name, int type, Object value)
		{
			this.name = name;
			this.type = type;
			this.value = value;
		}
            
		public String toString()
		{
			return name+"="+value.toString();
		}
	}
        
        
}


