/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class sparse_PrismSparse */

#ifndef _Included_sparse_PrismSparse
#define _Included_sparse_PrismSparse
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     sparse_PrismSparse
 * Method:    PS_FreeGlobalRefs
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1FreeGlobalRefs
  (JNIEnv *, jclass);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetCUDDManager
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetCUDDManager
  (JNIEnv *, jclass, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetMainLog
 * Signature: (Lprism/PrismLog;)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetMainLog
  (JNIEnv *, jclass, jobject);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetTechLog
 * Signature: (Lprism/PrismLog;)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetTechLog
  (JNIEnv *, jclass, jobject);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetLinEqMethod
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetLinEqMethod
  (JNIEnv *, jclass, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetLinEqMethodParam
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetLinEqMethodParam
  (JNIEnv *, jclass, jdouble);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetTermCrit
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetTermCrit
  (JNIEnv *, jclass, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetTermCritParam
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetTermCritParam
  (JNIEnv *, jclass, jdouble);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetMaxIters
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetMaxIters
  (JNIEnv *, jclass, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SetCompact
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_sparse_PrismSparse_PS_1SetCompact
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_ProbBoundedUntil
 * Signature: (IIIIIIIII)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1ProbBoundedUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_ProbUntil
 * Signature: (IIIIIIII)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1ProbUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_ProbReachReward
 * Signature: (IIIIIIIIIII)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1ProbReachReward
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_NondetBoundedUntil
 * Signature: (IIIIIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1NondetBoundedUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_NondetUntil
 * Signature: (IIIIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1NondetUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_NondetReachReward
 * Signature: (IIIIIIIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1NondetReachReward
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_StochBoundedUntil
 * Signature: (IIIIIIIIDI)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1StochBoundedUntil
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jdouble, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_StochCumulReward
 * Signature: (IIIIIIIID)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1StochCumulReward
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jdouble);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_StochSteadyState
 * Signature: (IIIIIII)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1StochSteadyState
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_StochTransient
 * Signature: (IIIIIIID)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1StochTransient
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jdouble);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_ProbExport
 * Signature: (IIIIIIILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1ProbExport
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jstring);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_StochExport
 * Signature: (IIIIIIILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1StochExport
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jstring);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_NondetExport
 * Signature: (IIIIIIIIILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1NondetExport
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jint, jstring);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_Power
 * Signature: (IIIIIIIIZ)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1Power
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jboolean);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_JOR
 * Signature: (IIIIIIIIZZD)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1JOR
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jboolean, jboolean, jdouble);

/*
 * Class:     sparse_PrismSparse
 * Method:    PS_SOR
 * Signature: (IIIIIIIIZZDZ)I
 */
JNIEXPORT jint JNICALL Java_sparse_PrismSparse_PS_1SOR
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jint, jint, jboolean, jboolean, jdouble, jboolean);

#ifdef __cplusplus
}
#endif
#endif
